{"version":3,"sources":["logo.svg","Box.js","Timer.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Box","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","enum","number","num","react_default","a","createElement","className","React","Component","Timer","days","time","hours","mins","secs","seconds","src_Box","Input","type","id","placeholder","min","name","max","onClick","set","value","App","resetSeconds","timer","startTimer","bind","assertThisInitialized","countDown","timeLeftVar","secondsToTime","setState","prevProps","divisor_for_hours","divisor_for_minutes","divisor_for_seconds","Math","floor","ceil","setInterval","console","log","clearInterval","e","preventDefault","document","getElementById","totalsecs","src_Timer","src_Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.090218ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nclass Box extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {enum : this.props.enum, number: this.props.num};\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"Box\">\n\t\t\t\t<h2> {this.props.num} </h2>\n\t\t\t\t<p className=\"Enum\">{this.props.enum}</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Box;","import React from \"react\";\nimport Box from './Box'\nclass Timer extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state ={ \n\t\t\t'days': this.props.time.days, \n\t\t\t'hours': this.props.time.hours,\n\t\t\t'mins': this.props.time.mins,\n\t\t\t'secs': this.props.time.secs,\n\t\t\t'seconds': this.props.seconds\n\t\t};\n\t}\n\trender(){\n\t\treturn (\n\t\t\t      <div className=\"Timer\">\n\t\t\t        <Box enum=\"Days\" num={this.props.time.days}/>\n\t\t\t        <Box enum=\"Hours\" num={this.props.time.hours}/>\n\t\t\t        <Box enum=\"Minutes\" num={this.props.time.mins}/>\n\t\t\t        <Box enum=\"Seconds\" num={this.props.time.secs}/>\n\t\t\t      </div>\n\t\t)\n\t}\n}\n\nexport default Timer;","import React from \"react\";\n\nclass Input extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form className='Input'>\n\t\t\t\t\t<h2> Timer Settings </h2>\n\t\t\t\t\t<p>Input and set the countdown timer</p>\n\t\t\t\t\t<br/>\n\t\t\t\t <div className='Set'>\n\t\t\t\t \t<div>\n\t\t\t\t\t  <label>Days:</label>\n\t\t\t\t\t  <br/>\n\t\t\t\t\t  <input type=\"number\" id=\"days\" placeholder=\"Days\" min = \"0\" name=\"Days\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t  <label>Hours:</label>\n\t\t\t\t\t  <br/>\n\t\t\t\t\t  <input type=\"number\" id=\"hours\"  placeholder=\"Hours\" min = \"0\" max = \"24\" name=\"Hours\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t  <label>Minutes:</label>\n\t\t\t\t\t  <br/>\n\t\t\t\t\t  <input type=\"number\" id=\"mins\" placeholder=\"Minutes\"min = \"0\" max =\"60\" name=\"Minutes\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t  <label>Seconds:</label>\n\t\t\t\t\t  <br/>\n\t\t\t\t\t  <input type=\"number\" id=\"secs\"  placeholder=\"Seconds\"min = \"0\" max = \"60\" name=\"Seconds\" />\n\t\t\t\t\t</div>\n\t\t\t\t </div>\n\t\t\t\t <input type=\"submit\" \n\t\t\t\t onClick={this.props.set} value=\"Set\" className='setButton'/>\n\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Input;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Timer from './Timer.js';\nimport Input from './Input.js';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { \n      time: {},\n      seconds:  0,\n      resetSeconds: 0\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({ time: timeLeftVar });\n  }\n  componentDidUpdate(prevProps){\n\n  }\n  secondsToTime(secs){\n    let days = Math.floor(secs/(24*60*60))\n\n    let divisor_for_hours = secs % (24*60*60);\n    let hours = Math.floor(divisor_for_hours / (60*60));\n\n    let divisor_for_minutes = divisor_for_hours % (60*60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      \"days\": days,\n      \"hours\": hours,\n      \"mins\": minutes,\n      \"secs\": seconds\n    };\n    return obj;\n  }\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    console.log(seconds);\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds,\n    });\n    \n    // Check if we're at zero.\n    if (seconds == 0) { \n      clearInterval(this.timer);\n    }\n  }\n  set(e){\n    e.preventDefault();\n    let time = {};\n     time.days = document.getElementById('days').value;\n     time.hours = document.getElementById('hours').value;\n     time.mins = document.getElementById('mins').value;\n     time.secs = document.getElementById('secs').value;\n    let totalsecs = (time.days*24*60*60)+(time.hours*60*60)+(time.mins*60)+(time.secs*1);\n    this.setState({time: time, seconds: totalsecs, resetSeconds: totalsecs});\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Timer time = {this.state.time} seconds = {this.state.seconds}/>\n        <button onClick={this.startTimer}>Start</button>\n        <Input set={this.set.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}